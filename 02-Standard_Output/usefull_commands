--------------------------------------------------------------------------------------------------
Sending Both Output and Error Messages to Different Files

1. Redirect output and error messages to different files:
	# <command> 1> messages.out 2> messages.err
   or:
   	# <command> > messages.out 2> messages.err

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Sending Both Output and Error Messages to the Same File

1. Redirect standard error messages to the same place as standard output:
	# <command> > outfile 2>&1
   or:
   	# <command> >& outfile
   or:
   	# <command> &> outfile

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Appending Rather Than Clobbering Output

1. Append the output:
	# <command> >> outfile

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Using Just the Beginning or End of a File

1. Output the first 10 lines of the given file:
	# head <file_path>
   Useful options:
   	-n [-]NUM
		Print the first NUM lines instead of the first 10; with the leading '-',
		print all but the last NUM lines of each file

2. Output the last 10 lines of the given file:
	# tail <file_path>
   Useful options:
   	-n [+]NUM
		Output the last NUM lines, instead of the last 10;
		or use -n +NUM to output starting with line NUM
	-f
		Output appended data as the file grows

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Throwing Output Away

1. Redirect the standard output to /dev/null:
	# <command> > /dev/null

2. Redirect the standard error to /dev/null:
	# <command> 2> /dev/null
	
3. Redirect both, the standard output and standard error, to /dev/null:
	# <command> > /dev/null 2>&1

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Saving or Grouping Output from Several Commands

1. Run commands together:
	{ <command1> ; <command2> ; <command3> ; }

2. Run commands together in a subshell:
	(<command1> ; <command2> ; <command3>)

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Connecting Two Programs by Using Output As Input

1. Take the output from one program and use it as the input of another program:
	<command1> | <command2>

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Saving a Copy of Output Even While Using It As Input

1. Debug a long sequence of piped I/O:
	<command1> | tee <file_path>.log | <command2>
	
2. Debug a long sequence of piped I/O including standard error:
	<command1> 2>&1 | tee <file_path>.log

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Connecting Two Programs by Using Output As Arguments

1. Command substitution feature usage:
	# <command1> $(<command2>)
	Note:
		Newlines in the output are replaced with a space character

2. Prompt to verify each delete:
	# rm -i <file_paths>

3. Repeat the last command:
	# !!

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Using Multiple Redirects on One Line

1. Redirect output to several different places:
	# <command> 3> file.three 4> file.four >5 file.five >6 eles.where

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Swapping STDERR and STDOUT

1. Swap STDERR and STDOUT:
	# <command> 3>&1 1>&2 2>&3-

2. Swap STDERR and STDOUT before the pipe redirection:
	# <command> 3>&1 1>stdout.logfile 2>&3- | tee -a stderr.logfile

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Keeping Files Safe from Accidental Overwriting

1. Do not overwrite any existing files when redirecting output:
	# set -o noclobber
   To turn the option off use:
   	# set +o noclobber

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
Clobbering a File on Purpose

1. Redirecting output even if noclobber is set:
	# <command> >| outfile

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
